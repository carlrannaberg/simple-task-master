name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string
      dry_run:
        description: 'Dry run (skip actual publishing)'
        required: false
        default: false
        type: boolean

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  check-version:
    name: Version Check
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version information
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            TAG="v${VERSION}"
          else
            TAG="${{ github.ref_name }}"
            VERSION="${TAG#v}"
          fi

          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag=${TAG}" >> $GITHUB_OUTPUT

          # Check if this is a prerelease (contains alpha, beta, rc)
          if [[ "${VERSION}" =~ (alpha|beta|rc) ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi

          echo "Detected version: ${VERSION}"
          echo "Tag: ${TAG}"

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ ! "${VERSION}" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\.[0-9]+)?)?$ ]]; then
            echo "❌ Invalid version format: ${VERSION}"
            echo "Expected format: X.Y.Z or X.Y.Z-prerelease"
            exit 1
          fi
          echo "✅ Version format is valid: ${VERSION}"

      - name: Check if version exists in package.json
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          RELEASE_VERSION="${{ steps.version.outputs.version }}"

          if [[ "${PACKAGE_VERSION}" != "${RELEASE_VERSION}" ]]; then
            echo "❌ Version mismatch!"
            echo "package.json version: ${PACKAGE_VERSION}"
            echo "Release version: ${RELEASE_VERSION}"
            echo "Please update package.json version to match the release version"
            exit 1
          fi
          echo "✅ Version matches package.json: ${RELEASE_VERSION}"

  test:
    name: Run Tests
    needs: check-version
    uses: ./.github/workflows/test.yaml

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [check-version, test]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Create package
        run: npm pack

      - name: Upload package artifact
        uses: actions/upload-artifact@v4
        with:
          name: npm-package
          path: simple-task-master-*.tgz
          retention-days: 30

  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [check-version, build]
    if: github.event.inputs.dry_run != 'true'
    environment: npm-release

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Publish to NPM
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          if [[ "${{ needs.check-version.outputs.is_prerelease }}" == "true" ]]; then
            echo "Publishing prerelease to NPM with --tag next"
            npm publish --tag next --provenance
          else
            echo "Publishing stable release to NPM"
            npm publish --provenance
          fi

      - name: Verify NPM publication
        run: |
          VERSION="${{ needs.check-version.outputs.version }}"
          sleep 30  # Give NPM some time to propagate

          # Check if the version is available
          if npm view simple-task-master@${VERSION} version; then
            echo "✅ Package successfully published to NPM"
          else
            echo "❌ Package publication verification failed"
            exit 1
          fi

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [check-version, build]
    if: github.event.inputs.dry_run != 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download package artifact
        uses: actions/download-artifact@v4
        with:
          name: npm-package

      - name: Extract changelog for this version
        id: changelog
        run: |
          VERSION="${{ needs.check-version.outputs.version }}"

          # Extract changelog section for this version
          awk "/^## \[${VERSION}\]/{flag=1; next} /^## \[/{flag=0} flag" CHANGELOG.md > release_notes.md

          if [[ ! -s release_notes.md ]]; then
            echo "⚠️  No changelog found for version ${VERSION}, using generic release notes"
            cat > release_notes.md << EOF
          ## Release ${VERSION}

          This release includes various improvements and bug fixes.

          ### Installation
          \`\`\`bash
          npm install -g simple-task-master@${VERSION}
          \`\`\`

          ### Usage
          \`\`\`bash
          npx simple-task-master@${VERSION} init
          \`\`\`

          For full documentation, see the [README](https://github.com/your-username/simple-task-master/blob/${VERSION}/README.md).
          EOF
          fi

          # Add installation instructions
          cat >> release_notes.md << EOF

          ---

          ### 📦 Installation

          **Global installation:**
          \`\`\`bash
          npm install -g simple-task-master@${VERSION}
          \`\`\`

          **Using npx:**
          \`\`\`bash
          npx simple-task-master@${VERSION} init
          \`\`\`

          ### 🔗 Links
          - [NPM Package](https://www.npmjs.com/package/simple-task-master/v/${VERSION})
          - [Documentation](https://github.com/your-username/simple-task-master/blob/${VERSION}/README.md)
          - [Changelog](https://github.com/your-username/simple-task-master/blob/${VERSION}/CHANGELOG.md)

          ---

          🤖 Generated with [Claude Code](https://claude.ai/code)
          EOF

          echo "Release notes preview:"
          cat release_notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.check-version.outputs.tag }}
          name: Release ${{ needs.check-version.outputs.version }}
          body_path: release_notes.md
          prerelease: ${{ needs.check-version.outputs.is_prerelease }}
          files: |
            simple-task-master-*.tgz
          generate_release_notes: true
          make_latest: ${{ needs.check-version.outputs.is_prerelease == 'false' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Post-Release Notifications
    runs-on: ubuntu-latest
    needs: [check-version, publish-npm, create-github-release]
    if: success() && github.event.inputs.dry_run != 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create release summary
        run: |
          VERSION="${{ needs.check-version.outputs.version }}"
          TAG="${{ needs.check-version.outputs.tag }}"
          IS_PRERELEASE="${{ needs.check-version.outputs.is_prerelease }}"

          cat > release_summary.md << EOF
          # 🚀 Simple Task Master ${VERSION} Released!

          ## What's New
          Simple Task Master ${VERSION} has been successfully released and is now available!

          ## 📦 Installation
          \`\`\`bash
          # Global installation
          npm install -g simple-task-master@${VERSION}

          # Or use npx
          npx simple-task-master@${VERSION} init
          \`\`\`

          ## 🔗 Links
          - **NPM Package**: https://www.npmjs.com/package/simple-task-master/v/${VERSION}
          - **GitHub Release**: https://github.com/your-username/simple-task-master/releases/tag/${TAG}
          - **Documentation**: https://github.com/your-username/simple-task-master/blob/${TAG}/README.md

          ## 📊 Release Stats
          - **Version**: ${VERSION}
          - **Tag**: ${TAG}
          - **Prerelease**: ${IS_PRERELEASE}
          - **Build Date**: $(date -u +'%Y-%m-%d %H:%M:%S UTC')

          EOF

          echo "📋 Release Summary:"
          cat release_summary.md

      - name: Update GitHub release with additional info
        run: |
          echo "✅ Release pipeline completed successfully!"
          echo "📦 NPM: https://www.npmjs.com/package/simple-task-master/v/${{ needs.check-version.outputs.version }}"
          echo "🏷️  GitHub: https://github.com/your-username/simple-task-master/releases/tag/${{ needs.check-version.outputs.tag }}"

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [check-version, publish-npm, create-github-release, notify]
    if: always()

    steps:
      - name: Cleanup artifacts
        uses: actions/download-artifact@v4
        with:
          name: npm-package
          path: cleanup/

      - name: Remove temporary files
        run: |
          rm -rf cleanup/
          echo "🧹 Cleanup completed"
